#!/bin/bash 
############################## Functions ##############################
function format_time () {
    num=$1
    min=0
    hour=0
    day=0
    if((num>59));then
        ((sec=num%60))
        ((num=num/60))
        if((num>59));then
            ((min=num%60))
            ((num=num/60))
            if((num>23));then
                ((hour=num%24))
                ((day=num/24))
            else
                ((hour=num))
            fi
        else
            ((min=num))
        fi
    else
        ((sec=num))
    fi
    formattedTime="$hour hours $min mins $sec secs"
}

function get_time_since_start () {
    END=$(date +%s)
    DIFF=$(( $END - $START ))
    format_time $DIFF
}

function get_time_since_last_event () {
    if [[ -z "$LAST" ]] ; then
        LAST=$START
    fi
    END=$(date +%s)
    DIFF=$(( $END - $LAST ))
    format_time $DIFF
    LAST=$END
}


function analyseFile () { 
    whichFile="$1"
    message="$2"
    
    printLineShort "$message"
    
    printLineShort "FFmpeg reports"
    $appPath/ffmpeg -i "$whichFile"
    
    printLineShort "SOX Audio Analysis"
    $appPath/ffmpeg -y -analyzeduration 500000000 -v -10 -i "$whichFile" -f sox - | sox -S -t sox - -n stats  

}

function doPrintLine () {    
    stringLength=${#1} 
    totalLength=$2
    symbolLength=$((($totalLength-$stringLength)/2))
    symbolString=""
    for i in $(seq 1 $symbolLength) 
        do symbolString+="-"
    done
    outputString="$symbolString $1 $symbolString"
    echo
    echo $outputString
}

function printLineShort () {
    echo
    doPrintLine "$1" 80 
}

function printLine () {
    echo
    doPrintLine "$1" 120 
}

function processFile () {
        inputFile="$1"
        

        printLine "processing a new file"
        echo "$inputFile"
    
        fileName=`basename "$inputFile"`
        fileAndPathNoExt="${inputFile%.*}"
        fileNameNoExt="${fileName%.*}"
        fileExtension="${inputFile##*.}"
    
        #make extention lowercase so it's easier to test.
        fileExtension=`echo $fileExtension | tr '[:upper:]' '[:lower:]'`
        compressedVideo=$compressedVideoPath/$fileNameNoExt.m4v
       

        DEBUG=0

        if [ $DEBUG -eq 1 ] ; then
            analyseFile "$inputFile" "Analysing input file"
        fi

        printLineShort "Getting the required volume increase"
        volumefactor=`ffmpeg -y -analyzeduration 500000000 -v -10 -i "$inputFile" -f sox - | sox -t sox - -n stat -v 2>&1`
       
        volumeAboveNetural=0.1
        volumeIncrease=$(bc <<< "$volumefactor + $volumeAboveNetural")
        echo "Volume factor is : $volumefactor volume will be set to $volumeIncrease"

        
      
         # if (( $(bc <<< "$volumefactor > 1.0") == 1 )); then
      
          if [ $fileExtension == "avi" ]; then
              outputFile="$outputPath/$fileNameNoExt.m4v"
              printLine "recompressing the AVI, doing sound normalization and compand"


             ffmpeg  -i "$inputFile"  \
                      -scodec mov_text \
                      -vcodec libx264 -profile:v "high" -level:v "4.0" -crf 18 \
                      -af 'compand=.3|.3:1|1:-90/-60|-60/-40|-40/-30|-20/-20:6:0:-90:0.2' -af volume=$volumeIncrease  \
                      -y "$outputFile"
           
          elif [ $fileExtension == "mp3" ]; then
              outputFile="$outputPath/$fileNameNoExt.mp3"
              printLine "recompressing the MP3, doing sound normalization and compand"
              
              ffmpeg  -i "$inputFile"  \
                      -af 'compand=.3|.3:1|1:-90/-60|-60/-40|-40/-30|-20/-20:6:0:-90:0.2' -af volume=$volumeIncrease  \
                      -y "$outputFile"

          else
              outputFile="$outputPath/$fileNameNoExt.m4v"
              printLineShort "Doing normalization and compand"
              
              ffmpeg  -i "$inputFile"  \
                      -scodec mov_text \
                      -vcodec copy \
                      -af 'compand=.3|.3:1|1:-90/-60|-60/-40|-40/-30|-20/-20:6:0:-90:0.2' -af volume=$volumeIncrease  \
                      -y "$outputFile"

          fi
          
          # exit
          if [ $DEBUG -eq 1 ] ; then
              analyseFile "$outputFile" "Analysing output file"
          fi
      # fi
        
        get_time_since_last_event
        
        printLineShort "processing this file is done and took $formattedTime"
}

############################## script ##############################
DEBUG=0
START=$(date +%s)


# get the current locaiton of this script
DIR="$( cd "$( dirname "$0" )" && pwd )"
#strip out /Resources from the end of the string.

plistLocation=`echo ${DIR%%/Resources*}`

#read the version number from the pList
CFBundleVersion=`defaults read $plistLocation/Info.plist CFBundleVersion`;

printLine "Starting version $CFBundleVersion"

# set some useful variables.
appPath="/usr/local/bin"
applicationSupportDir=$HOME"/Library/Application Support/krep"
outputPath="$HOME/Desktop/krep-converted"
compressedVideoPath="$applicationSupportDir/video"



# Check everything we need installed actuallyis.
printLine "checking everything is installed"
echo "checking for Homebrew (packing manager)"
which -s brew
if [[ $? = 0 ]] ; then
    echo  ">> Homebrew is installed"
    #brew is intalled -  lets go...

    # Create output folder
    if [ ! -d "$outputPath" ] ; then
      mkdir -p "$outputPath"
    fi

    if [ ! -d "$compressedVideoPath" ] ; then
      mkdir -p "$compressedVideoPath"
    fi

    echo "checking for wget (file downloading)"
    which -s wget || /usr/local/bin/brew install wget 
    which -s jq && echo ">> wget is installed"

    echo "checking for jq (for parsing JSON on the command line)"
    which -s jq || /usr/local/bin/brew install jq 
    which -s jq && echo ">> jq is installed"
    
    echo "checking for sox (audio processing)"
    which -s sox || /usr/local/bin/brew install sox 
    which -s sox && echo ">> Sox is installed"

    
    echo "checking for ffmpeg (video manipulation & processing)"
    which -s ffmpeg || /usr/local/bin/brew install ffmpeg
    which -s ffmpeg && echo ">> ffmpeg is installed"
    
    # echo "checking for HandBrakeCLI"
    # which -s HandBrakeCLI || /usr/local/bin/brew install https://raw.github.com/sceaga/homebrew-tap/master/handbrakecli.rb
    # which -s HandBrakeCLI && echo ">> HandBrakeCLI is installed"

    printLine "Checking for updates"
    #Lets check to see if we have the latest version of Krep
    # get the last tag from the Krep. It's JSON 
    githubVersionFromJSON=`curl --silent 'https://api.github.com/repos/dwkns/krep/tags'`

    # use jq to parse the JSON string and get the 'name' of the tag.
    # make the big assumption that the latest tag is at [0] in the JSON
    githubVersionInQuotes=$(echo "$githubVersionFromJSON" | jq '.[0] | .name')

    # strip out the leading and trailing quotes.
    githubVersion=$(echo "$githubVersionInQuotes" | sed 's/^"\(.*\)"$/\1/')

    echo "$githubVersion is the tag from Github";

    currentAppVersion=`defaults read "/Applications/Krep.app/Contents/Info.plist" CFBundleShortVersionString`;

    echo "$currentAppVersion is the current app version";
    echo ""

    if [ `echo "$githubVersion > $currentAppVersion" | bc` == 1 ]; then
      echo "Git hub version is newer. Probably should do the update then..."
      echo ""
      wget https://github.com/dwkns/krep/archive/master.zip -O /tmp/master.zip
      unzip -o /tmp/master.zip -d /tmp
      cp -rf /tmp/krep-master/Krep.app/Contents/Info.plist /Applications/Krep.app/Contents/Info.plist
      cp -rf /tmp/krep-master/Krep.app/Contents/Resources/script /Applications/Krep.app/Contents/Resources/script

      rm -rf /tmp/master.zip
      rm -rf /tmp/krep-master

      echo ""
      echo "Copying files into place."
      printLine "Well that the update done. You'll need to restart Krep"
     

    else

      echo "Krep is up-to-date"

      printLine "Processing files"
      
      echo "$# items dropped"
   
      #build an array of files to process from the ones that were dropped.
      fileArray=()
      notValidFileArray=()
      while test $# -gt 0
      # loop through the dropped files - this is recursive
      do
          PASSED="$1"
         
          # if [[ -d $PASSED ]]; then
          # Is it a directory
          #....
          # fi

          # if [[ -f $PASSED ]]; then
          # Is it a file
          #....
          # fi
               
          IFS=$'\n' #make it ignore the spaces in the filenames.
          
          validFiles=( "$(find $1 -iname '*.m4v' -o -iname '*.mp4' -o -iname '*.mkv' -o -iname '*.avi' -o -iname '*.mp3')")
          nonValidFiles=( "$(find $1 ! \( -iname '*.m4v' -o -iname '*.mp4' -o -iname '*.mkv' -o -iname '*.avi' -o -iname '*.mp3' \))")

          for file in ${validFiles[@]} ; do
              fileArray=("${fileArray[@]}" "$file")
          done

          for file in ${nonValidFiles[@]} ; do
              notValidFileArray=("${notValidFileArray[@]}" "$file")
          done

          shift  
      done

      echo ""
      echo "${#fileArray[@]} files to process"
      for i in "${fileArray[@]}"; do
          echo "$i"
      done

      echo ""
      echo "Being ignored :"
      for i in "${nonValidFiles[@]}"; do
          echo "$i"
      done

      for i in "${fileArray[@]}"; do
          processFile "$i"
      done

    fi  
else
    
    echo "#!#!##!#!##!#!##!#!##!#!##!#!# This app relies on Homebrew being installed #!#!##!#!##!#!##!#!##!#!##!#!#"
    echo "Open a terminal and type :"
    echo "/usr/bin/ruby -e \"\$\(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\""

fi

printLine "Cleaning up by removing tempory files."
rm -rf "$compressedVideoPath"


get_time_since_start
printLine "All done it took $formattedTime"